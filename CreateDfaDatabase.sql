
/******************************************************************************
MySql file to create the basic DFA workflow schema.  This file should only
be run for initial create as it erases (drops) the dfa database before
re-creating it again.

Note: In MySql, the length specified for the int is a display width for
a result set, and has no effect on the range of the datatype.
******************************************************************************/

drop database dfa;
create database dfa;
use dfa;

/*********************************************************************
These lookup tables are frequently accessed but infrequently modified.
Therefore, liberally create indices for them.
*********************************************************************/

CREATE TABLE LKUP_EVENT (
	EVENT_TYP INT(5) NOT NULL,
	EVENT_NM VARCHAR(32) NOT NULL,
	EVENT_TX VARCHAR(128) NOT NULL,
	PASSIVE BIT(1) NOT NULL DEFAULT 0, /* Is this an event that does not change the current state, such as a comment? */
	FLAGGED BIT(1) NOT NULL DEFAULT 0, /* Is this an exceptional event that the user interface should flag? */
	MOD_BY VARCHAR(32) NOT NULL,
	MOD_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (EVENT_TYP),
	INDEX (PASSIVE),
	INDEX (FLAGGED)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB;

-- Insert this one row because it is used as a default value.
insert into LKUP_EVENT (EVENT_TYP,EVENT_NM,EVENT_TX,MOD_BY) VALUES (1,'Start','Start Action','DFA-Create');
COMMIT;

create table LKUP_STATE (
	STATE_TYP INT(5) NOT NULL,
	STATE_NM VARCHAR(32) NOT NULL,
	STATE_TX VARCHAR(128) NOT NULL,
	ACTIVE BIT(1) NOT NULL DEFAULT 1,
	FLAGGED BIT (1) NOT NULL DEFAULT 0,
	EXPECTED_NEXT_EVENT INT NULL,
	MOD_BY VARCHAR(32) NOT NULL,
	MOD_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (STATE_TYP),
	INDEX (ACTIVE),
	INDEX (FLAGGED)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB;

create table LKUP_EVENT_STATE_TRANS (
	STATE_TYP INT NOT NULL REFERENCES LKUP_STATE (STATE_TYP),
	EVENT_TYP INT NOT NULL REFERENCES LKUP_EVENT (EVENT_TYP),
	NEXT_EVENT_TYP INT NOT NULL REFERENCES LKUP_STATE (STATE_TYP),
	MOD_BY VARCHAR(32) NOT NULL,
	MOD_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,	
	PRIMARY KEY (STATE_TYP,EVENT_TYP),
	INDEX (NEXT_EVENT_TYP)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB;

alter table LKUP_STATE ADD CONSTRAINT FOREIGN KEY (STATE_TYP,EXPECTED_NEXT_EVENT) 
	REFERENCES LKUP_EVENT_STATE_TRANS (STATE_TYP,EVENT_TYP);

create table LKUP_ACTION_TYP (
	ACTION_TYP INT NOT NULL PRIMARY KEY,
	ACTION_NM VARCHAR(32) NOT NULL,
	ACTION_TX VARCHAR(128) NOT NULL,
	START_STATE_TYP INT NOT NULL REFERENCES LKUP_STATE (STATE_TYP),
	START_EVENT_TYP INT NOT NULL DEFAULT 1 REFERENCES LKUP_EVENT (EVENT_TYP),
	MOD_BY VARCHAR(32) NOT NULL,
	MOD_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB;

create table DFA_ACTION (
	DFA_ACTION_ID BIGINT NOT NULL PRIMARY KEY,
	ACTION_TYP INT NOT NULL REFERENCES LKUP_ACTION_TYP (ACTION_TYP),
	COMMENT_TX MEDIUMTEXT NULL,
	MOD_BY VARCHAR(32) NOT NULL,
	MOD_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB;

create table DFA_ACTION_STATE (
	DFA_ACTION_ID BIGINT NOT NULL REFERENCES DFA_ACTION (DFA_ACTION_ID),
	DFA_STATE_ID INT NOT NULL,
	CURRENT BIT DEFAULT 1,
	STATE_TYP INT NOT NULL REFERENCES LKUP_STATE (STATE_TYP),
	EVENT_TYP INT NOT NULL REFERENCES LKUP_EVENT (EVENT_TYP),
	PARENT_STATE_ID INT NOT NULL, /* State that is current AFTER this row is inserted.  PASSIVE when PARENT_STATE_ID < DFA_STATE_ID */
	UNDO_STATE_ID INT NULL, /* Undoable when UNDO_STATE_ID IS NOT NULL */
	COMMENT_TX MEDIUMTEXT NULL, 
	MOD_BY VARCHAR(32) NOT NULL,
	MOD_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (DFA_ACTION_ID,DFA_STATE_ID),
	CONSTRAINT FOREIGN KEY (DFA_ACTION_ID,PARENT_STATE_ID) references DFA_ACTION_STATE (DFA_ACTION_ID,DFA_STATE_ID),
	CONSTRAINT PARENT_NOT_FUTURE CHECK (PARENT_STATE_ID <= DFA_STATE_ID),
	CONSTRAINT FOREIGN KEY (DFA_ACTION_ID,UNDO_STATE_ID) references DFA_ACTION_STATE (DFA_ACTION_ID,DFA_STATE_ID),
	CONSTRAINT UNDO_IS_PAST CHECK (UNDO_STATE_ID IS NULL OR UNDO_STATE_ID <= DFA_STATE_ID),
	INDEX (CURRENT)
	)
